- Single .java file can always have maximum only one public class, and name of public class will be always same as file name.
- We can have multiple class in the .java file which are not public
- Class is blueprint of object which has some properties (variables) and behaviour (methods). Object is an instance of a class.
- (Example: Human is template/blueprint/class, Child, Boy, Men, Women can be it's Objects. Their behaviour could be walk, eat etc...)
- We can access properties and behaviour of a class using objects
- If you have two constructor one is parameterized constructor and one is default constructor in your class you can call
 default constructor in your parameterized constructor using this().
- Example:
    static int count;

    public Person() {
        count++;
        System.out.println("creating an object");
    }

    public Person(int newAge, String newName) {
        this(); // example
        this.name = newName;
        this.age = newAge;
    }

- During inheritance super class is used to call parent class constructor
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Real-life Illustration of Polymorphism in Java: A person at the same time can have different characteristics.
Like a man at the same time is a father, a husband,and an employee. So the same person possesses different
behaviors in different situations. This is called polymorphism.

Types of Java Polymorphism
    1. Compile-time Polymorphism (Method Overloading)
    2. Runtime Polymorphism also know as Dynamic Method Dispatch (Method Overriding)


1. Compile-time/Static Polymorphism (Method Overloading):

If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.

Refer code: MethodOverloadingDemo
Scenario 1 demonstrates overloading with different parameter types.
Scenario 2 shows overloading with a different number of parameters.
Scenario 3 illustrates overloading with a different order of parameters.
Scenario 4 overloading with different return types compilation error.
Scenario 5 demonstrates overloading static methods.

- Overloaded methods must have the same name.
- Overloaded methods must have different parameter lists (number, order, or types of parameters).
- An attempt to overload the main method shows that only the standard main(String[] args) method is recognized as the entry point for the program.
- Multiple main methods can be declared and overloaded, but only the standard main(String[] args) is recognized as the entry point for the program.
- Jvm checks for only main method which has signature like this (String[] args) an method name as main so only that method can be considered as entry
  point of program not the overloaded methods

- We can overload static methods but we need to use class name to call static methods


2. Runtime Polymorphism/Dynamic Method Dispatch (Method Overriding):

It is a process in which a function call to the overridden method is resolved at Runtime. This type of polymorphism is achieved by Method Overriding.
If a method name in base class is same it's child classes but with same arguments types, order of arguments & number of arguments then it is called method
overloading.

Rules for overriding a method in Java
- There must be inheritance between classes.
- The method between the classes must be the same(name of the class, number, and type of arguments must be the same).
- Static methods can't be overridden

Refer code: MethodOverridingDemo.java & StaticMethodOverrideDemo.java
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Abstraction: Interface defines a contract for behavior, abstract classes provide partial implementation; both hide implementation details.
- Inheritance: Establishes a parent-child relationship where child classes inherit attributes and behaviors from parent classes.
- Encapsulation: Wrapping data and methods within a single unit; Java classes or POJOs with getter and setter methods provide controlled access to data.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Access Modifiers in java:
- Private: Accessible only within the class.
- Public: Accessible from anywhere in the Java program.
- Protected: Accessible within the same package and by subclasses.
- Default (Package-private): Accessible only within the same package.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------