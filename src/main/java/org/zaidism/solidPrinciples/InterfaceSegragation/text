public interface Worker {
    void work();
    void eat();
    void takeBreak();
}


public class OfficeWorker implements Worker {
    @Override
    public void work() {
        System.out.println("Office worker is working.");
    }

    @Override
    public void eat() {
        System.out.println("Office worker is eating.");
    }

    @Override
    public void takeBreak() {
        System.out.println("Office worker is taking a break.");
    }
}

public class RobotWorker implements Worker {
    @Override
    public void work() {
        System.out.println("Robot worker is working.");
    }

    @Override
    public void eat() {
        // Not applicable to a robot, but forced to implement
    }

    @Override
    public void takeBreak() {
        // Not applicable to a robot, but forced to implement
    }
}

Problem:
RobotWorker class is forced to implement methods like eat() and takeBreak() even though they don't
apply to it.
This violates the ISP because RobotWorker is dependent on methods it doesn't use, leading to
awkward and potentially
error-prone code.



ISP

public interface Workable {
    void work();
}

public interface Eatable {
    void eat();
}

public interface Breakable {
    void takeBreak();
}


public class OfficeWorker implements Workable, Eatable, Breakable {
    @Override
    public void work() {
        System.out.println("Office worker is working.");
    }

    @Override
    public void eat() {
        System.out.println("Office worker is eating.");
    }

    @Override
    public void takeBreak() {
        System.out.println("Office worker is taking a break.");
    }
}

public class RobotWorker implements Workable {
    @Override
    public void work() {
        System.out.println("Robot worker is working.");
    }

    // No need to implement eat() or takeBreak() methods
}
