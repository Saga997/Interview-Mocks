"Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification."

Explanation:
Open for extension: This means that the behavior of a module or class can be extended without modifying the existing code.

// Initial discount service
class DiscountService {
    public double getDiscount(String customerType) {
        if (customerType.equals("Regular")) {
            return 0.1; // 10% discount for regular customers
        } else if (customerType.equals("VIP")) {
            return 0.2; // 20% discount for VIP customers
        }
        return 0.0; // No discount for other customers
    }
}

If we need to add a new customer type (e.g., "Premium" customers), we have to modify the DiscountService class
by adding another if-else block.
This violates the Closed for modification part of the Open/Closed Principle, as each new customer type requires
changing the existing class.

// Define an interface for discount strategy
interface DiscountStrategy {
    double getDiscount(); // only declare the behaviour
}

// Implement discount strategies for different customer types
class RegularCustomerDiscount implements DiscountStrategy {
    @Override
    public double getDiscount() {
        return 0.1; // 10% discount for regular customers // implement it in your own way
    }
}

class VIPCustomerDiscount implements DiscountStrategy {
    @Override
    public double getDiscount() {
        return 0.2; // 20% discount for VIP customers
    }
}

class PremiumCustomerDiscount implements DiscountStrategy {
    @Override
    public double getDiscount() {
        return 0.3; // 30% discount for premium customers
    }
}

// Discount service now works with any DiscountStrategy
class DiscountService {
    private DiscountStrategy discountStrategy;

    public DiscountService(DiscountStrategy discountStrategy) {
        this.discountStrategy = discountStrategy;
    }

    public double getDiscount() {
        return discountStrategy.getDiscount();
    }
}

public class Main {
    public static void main(String[] args) {
        // For a regular customer
        DiscountService regularDiscountService = new DiscountService(new RegularCustomerDiscount());
        System.out.println("Regular customer discount: " + regularDiscountService.getDiscount());

        // For a VIP customer
        DiscountService vipDiscountService = new DiscountService(new VIPCustomerDiscount());
        System.out.println("VIP customer discount: " + vipDiscountService.getDiscount());

        // For a premium customer (extended behavior)
        DiscountService premiumDiscountService = new DiscountService(new PremiumCustomerDiscount());
        System.out.println("Premium customer discount: " + premiumDiscountService.getDiscount());
    }
}

