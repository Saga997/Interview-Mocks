1. What is a marker interface in Java, and why is it used? Provide examples like Serializable and Cloneable.
2. Explain Object-Oriented Programming (OOP) concepts with real-world examples.
3. When should you use an abstract class, and when should you use an interface?
4. Discuss the potential issues if HashMap generates the same hashcode for different keys. Provide insights into the internal workings of HashMap.
5. Elaborate on the roles of `hashCode` and `equals` methods in Java.
6. Create a thread-safe Singleton class and explain its implementation. When do we use a Singleton class?
7. Can static methods be overloaded? Can they be overridden?
8. Explain the Diamond Problem in inheritance.
9. Discuss the Saga Design pattern and compare orchestration versus choreography.
10. Explain the SOLID principles in software design.
11. Provide a real-time example while explaining a design pattern.
12. Comment on the differences between JPA queries and native queries. //@Query(native = true)
13. Describe the use of `@Transactional` in Java.//
14. Elaborate on Hibernate cache, its types, and benefits.
15. Explain the concepts related to access specifiers in Java.
16. Compare `Comparator` and `Comparable` and discuss which is preferable.
17. Explain the usage and benefits of the `AtomicInteger` class.
18. Define Service registry/discovery and discuss its advantages.
19. What is an API gateway, and how does it provide benefits?
20. Provide a detailed explanation of synchronization in Java.
21. Compare ArrayList and LinkedList in terms of initial capacity and dynamic resizing.
22. Perform a complexity analysis of any given code.
23. Explain the Optional class in Java 8, its uses, and how it helps avoid null pointer exceptions.
24. In what situations can we use static and default methods of a functional interface, and what is their purpose?
25. Why do we use method reference in Java?
26. Provide a detailed explanation of lambda expressions in Java.
27. Elaborate on the usage of `super` and `this` keywords in Java.
28. Explain @Qualifier in spring boot
29. Create a reusable predicate
30. Elaborate functional interface introduced in java 8 with their use in real time.
31. How to achieve Inter-thread communication why notify and wait methods are in object class
32. Explain Static member/function/classes when to use these
33. Which way of implementing thread is better and why?
34. CompletableFuture, ExecutorService, Atomic Integer
35. Spring bean life cycle in detail
36. What is IOC, DI and why it used.
37. @Controller vs @RestController. ResponseEntity, RequestBody
38. @QueryParam vs @PathParam vs @PathVariable when to use these?
39. PATCH VS PUT vs POST what is different where can we use these
40. Dispatcher servlet it's functionality
41. Actuators what is the use
42. @SpringBootApplication annotation explain
43. Some status code with their meaning 404 (path not found or resource not found), 400, 500, 201, 200 etc etc..
44. JPA Mapping one to one, one to many, many to one, many to many in detail
45. Caching in spring boot through in memory and redis explain and also explain @Cacheable and @CacheEvict..
46. Caching in hibernate or internal implementation
47. How to implement Spring security, Explain JWT
48. OAuth explain (Key clock)
49. why wait and notify methods are in object class?
50. Can we overload main method in java?
51. what is an Immutable class how to create it? when do we use it?
52. Pagination in spring for performance.
52. What are the ways to handle exception in spring and which is better?
52. What transient keyword what is it's use?
53. capacity method of hashmap vs size method
54. calling static method without using class name belongs to same or different package.
55. Why default and static method introduced in java 8?
56. What is flatmap()/flattering where can we use it
57. Can we extend one functional interface into another functional interface
58. Lazy & eager loading in spring boot
59. @Valid method
60. Difference between stream and collections
61. Terminal and Intermediate operations in java
62. How to create object in java other than new keyword
62. Exception Hierarchy

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Spring boot interview questions (Source: https://www.youtube.com/playlist?list=PLVz2XdJiJQxwS8FyWnWyKyfILxHPLsiro)

What all spring boot starter you have used or what all module you have worked on ?
How will you run your Spring Boot application ?
What is the purpose of the @SpringBootApplication annotation in a Spring Boot application ?
can I directly use @EnableAutoConfiguration ,@ComponentScan & @Configuration annotation in my main class , instead of using
@SpringBootApplication annotation , if yes will my application work as expected ?
What is Auto configuration in spring boot ?
How can you disable a specific auto-configuration class in Spring Boot ?
How can you customize the default configuration in Spring Boot like port no?
How Spring boot run() method works internally ?
What is Command line runner in spring boot ?

Can you explain the purpose of Stereotype annotations in the Spring Framework ? hint 5 annotations (controller, rest controller, service, repository, component)
How can you define bean in spring framework ?  (returning @Bean from @configuration)
What is dependency injection ?
How many ways we can perform dependency injection in spring or spring boot ? (fields, contractor, setter)
where you would choose to use setter injection over constructor injection, and vice versa ? (immutable, partial injection)
Can you provide an example of a real-world use case where @PostConstruct is particularly useful? (preprocessing)
How can we dynamically load values in a Spring Boot application? //@Value Environment class
Can you explain the key differences between YML and properties files, and in what scenarios you might prefer one format over the other?
What is the difference between yml & YAML ?
If I will configure same values in both properties then which value will be load in spring boot OR Who will load first properties or yml file ?
How to load External Properties in Spring Boot ? (spring.config.import)
How to map or bind config properties to java Object ? (@ConfigurationProerteis(prefix=""),.. var name as key)

How will you resolve bean dependency ambiguity ? //@Qualifier("classname in camelcase") if one interface orderrepo implemented by two orderrepoimpl1 & orderrepoimpl2 class and you @autowired interface name like orderrepo run tim give error
Can we avoid this dependency ambiguity without using @Qualifier ? //yes we can use @Resource(name="classname in camelcase")//byname instead of @Qualifier//by type
What is bean scope & Can you explain different type of bean scope ? // singleton, prototype, request, session, webscoket(per websocket), application (entire webapp)
How to define custom bean scope ?//scerio where i need to create bean for every thread then existing scope will not help. Implmenet scope interface override get and remove method
Can you provide a few real-time use cases for when to choose Singleton scope and Prototype scope ? //singl: caching, db connection pool & db config, appn config like shared resourc across appn & prot: thread safety as it will return new instance each time can be use in builder, mapper class
can we inject prototype bean in singleton bean ? if yes what will happen if we inject prototype bean in singleton bean ? // yes we can do it. but the bean with prototype will looese its own scope and behave as singleton scope inherting from the singleton bean. to overcome this instead of autowired prototype of bean you can autowrire application context and get bean from there not recommended way as we are manuling managing life cycle of bean two ways again you can solve this by @Lookup and  ObjectFactory<PrototypeBean>
What is the difference between spring singleton and plain singleton ? //within the jvm singleton for java singleton & scope within the application context for spring singleton
What is the purpose of the BeanPostProcessor interface in Spring, and how can you use it to customize bean initialization and destruction? // implememtn BeanPostProcessor interface and override its two method postprocessbeforeintialization & postprocessafterintialization. example while returing user brean if i want to validate password there we can use it

Have you worked on Restful webservices ? If yes What all HTTP methods have you used in your project ?
How can you specify the HTTP method type for your REST endpoint?
Scenario : Can you design a rest endpoint , Assume that you have a Product database, and your task is to create an API to filter a list of products by productType ?
Scenario : Design endpoints in a way that takes “productType” as input. If the user provides this input, the endpoint should filter products based on the specified condition. If “productType” is not provided, the endpoint should return all the products. ?
What is the difference between @PathVariable & @RequestParam ?
Why did you use @RestController why not @Controller ?
How can we deserialize a JSON request payload into an object within a Spring MVC controller ?
Can we perform update operation in POST http method if yes then why do we need Put Mapping or put http method?
Can we pass Request Body in GET HTTP Method ?
How can we perform content negotiation (XML/JSON) in Rest endpoint ?
What all status code you have observed in your application ?
How can you customize the status code for your endpoint ? // @ResponseStatus
How can you enable cross origin ?
How can you upload a file in spring ?
How do you maintain versioning for your REST API?
How will you document your rest API ?
How can you hide certain REST endpoints to prevent them from being exposed externally? //@HIde
How will you consume restful API ?

How will you handle exceptions in your project ?
How can you avoid defining handlers for multiple exceptions, or what is the best practice for handling exceptions ?
How will you validate or sanitise your input payload ?
How can you populate validation error message to the end users ?
How can you define custom bean validation ?
use case : let’s say you find a bug in production environment and now you want to debug that scenario ,How can you do that from your local ?
How can you enable a specific environment without using profiles? OR what is the alternative to profiles to achieving same use case ?
What is the difference between @Profile & @ConditioOnXXX ?
What is AOP ?
What is pointcut & join Points in AOP ?
What are different type of advice ?
use case — can I use AOP to evaluate performance of a method or is this possible to design a logging framework to capture request and response body of a method ?
