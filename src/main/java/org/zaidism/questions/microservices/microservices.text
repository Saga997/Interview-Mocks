InterService Communication:

1. RestClient:
   - Typically supports synchronous communication, where the client waits for the response from the server before proceeding.
   - Usage: Suitable for simple and straightforward interactions where immediate responses are required.

2. WebClient:
   - Provides both synchronous and asynchronous communication capabilities.
   - Usage: Offers flexibility for developers to choose between sync and async operations based on specific use cases.
     Asynchronous operations are beneficial for non-blocking and high-concurrency scenarios.

3. FeignClient:
   - Primarily designed for synchronous communication, similar to RestClient.
   - Usage: Suitable for scenarios where synchronous communication suffices, offering ease of use and integration with Spring ecosystem.

4. Advance Rest Client (from Spring 3.2):
   -  Supports both synchronous and asynchronous communication.
   - Usage: Provides advanced features such as reactive programming support, making it suitable for high-performance and non-blocking applications.
    Asynchronous communication can improve system responsiveness and scalability.

Summary:
- Sync Communication: Useful for scenarios where immediate responses are required, simpler to implement, and often sufficient for low-concurrency environments.
- Async Communication: Beneficial for non-blocking and high-concurrency scenarios, enabling improved system scalability, responsiveness, and resource utilization.

In Spring-based applications, WebClient and Advance Rest Client (with its advanced features) are preferable choices for asynchronous communication,
offering flexibility and performance advantages over traditional synchronous approaches.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Service Registry (Eureka Netflix CLIENT):
- Acts as a directory of all services within the ecosystem.
- Services register themselves with the registry.
- Helps services discover and communicate with each other.
  
Discovery Server (Eureka Netflix Server):
- Manages the service registry.
- Keeps track of available services.
- Helps services find each other.
  
API Gateway (Spring Cloud Gateway):
- Serves as the main entry point for the application.
- Directs incoming requests to the appropriate services.
- Can handle various tasks like routing, authentication, security, and load balancing.

Additional Features of API Gateway:
- Routing based on Request Headers.
- Authentication and Security.
- Load Balancing.
- CCi Termination.

Circuit Breaker in Microservices (using Hystrix and Resilience4j): refer: https://salithachathuranga94.medium.com/micro-service-patterns-circuit-breaker-with-spring-boot-253e4a829f94
- Ensures service reliability by detecting and preventing failures.
- Helps services gracefully handle errors and recover from failures.

Distributed Tracing (Spring Cloud Sleuth and Zipkin):
- Provides insights into how requests flow through the microservices architecture.
- Helps in understanding and troubleshooting complex interactions between services.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What are microservices?

    Microservices is an architecture where the application is exposed as loosely coupled services that can be independently developed, deployed, and maintained.

    Each service exposed is referred to as Microservice. Each service performs a unique function.

    Speciality of this architecture is that polyglot architecture is supported. For example, if a team is working on one of the microservice using Java, Spring Boot, and MySQL,
    another team can work on another microservice using Python, Node JS, and NoSQL.

    Different microservices can use a different version of the same programming language.
    Different microservices can use different programming languages.
    Different microservices can use different architectures as well.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Why Microservices?

    In the case of monolith applications, there are several problems like
    • Same code base for presentation, business layer, and data access layer: Application is deployed as a single unit.
    • Complex to maintain and scalability is an issue.

    Microservice solves the above problems.

        Microservices are ideal when a monolith or a legacy application needs to be modernized.

        For new software development, if the key business drivers are to reduce time to market, scalable better
        software, lower costs, faster development, or cloud-native development, microservices are ideal.

        Each service is independent and gives the flexibility to choose the programming language, database,
        and/or architecture.

        Distinct services can be developed, deployed, and maintained independently.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Pros and Cons of Microservice Architecture

Pros of Microservice Architecture:

- Freedom in Technology Choice: Each microservice can use the most suitable technology stack for its specific needs.
- Single Responsibility: Each microservice focuses on a single capability or function, making it easier to manage and understand.
- Independent Deployment: Microservices can be deployed individually, allowing for more frequent updates without affecting other services.
- Faster Release Cycle: Independent deployment enables faster software releases, facilitating quicker adaptation to changes and requirements.
- Enhanced Security: Security measures can be tailored to each microservice, reducing the impact of security breaches.
- Parallel Development: Different teams can work on multiple microservices simultaneously, speeding up development.

Cons of Microservice Architecture:

- Management Complexity: Managing numerous microservices requires robust monitoring and coordination efforts.
- Communication Challenges: Inter-service communication can introduce complexity and latency, affecting system performance.
- Operational Overhead: Increased number of services leads to higher operational efforts, including configuration and monitoring.
- Transaction and Data Management: Maintaining transactional integrity and data consistency across microservices can be challenging.
- Resource Intensiveness: Each microservice requires its own resources, leading to higher infrastructure costs.
- Debugging Difficulty: Identifying and resolving issues within a microservices architecture can be complex without proper monitoring and debugging tools.
- Skill set Requirements: Building and maintaining microservices requires a diverse skill set across various domains, leading to larger and specialized teams.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
When to Use Microservices?

- Reduced Time to Market: Microservices enable faster development and deployment cycles, allowing for quicker releases and adaptability to market changes.
- Scalability: Microservices architecture offers better scalability, allowing individual components to scale independently as needed.
- Cost Savings: Microservices can lead to lower costs by optimizing resource usage and enabling efficient scaling.
- Faster Development: The modular nature of microservices facilitates faster development cycles, with teams working on smaller, more manageable components.
- Cloud-Native Development: Microservices are well-suited for cloud-native development, leveraging cloud infrastructure and services effectively.
- Team Size and Skills: Microservices are most beneficial for larger teams with the necessary skills to develop, deploy, and manage individual services effectively.
- Time and Skill Constraints: If there are constraints on time or the skills of team members, adopting microservices may not be advisable.
- Experience with Microservices: Microservices architecture should be chosen only if the team has prior experience or expertise in working with microservices.
- Not Suitable for Simple Applications: Microservices may not be suitable for simple applications that can be effectively managed by a monolithic architecture.
- Consider the Cost: Before adopting microservices, assess whether the benefits of decoupling services outweigh the associated costs and complexities.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Key Features of Microservices:

- Modular Architecture: Microservices architecture decomposes an application into smaller, independent services, enabling individual development, deployment,
and scaling of each service. This facilitates the seamless introduction of new features into the application.

- Decentralization: Microservices promote a decentralized approach to data management, with each service owning the data relevant to its business functionality.
While a monolithic database may exist, each service manages its own subset of data.

- Black Box Principle: Each microservice operates as a black box, encapsulating its internal complexity and exposing only the necessary interfaces to communicate
with other services or components. This abstraction simplifies the interaction between services.

- Security: Microservices platforms should offer built-in security features such as certificate management, various authentication methods, and role-based access control (RBAC).
Security concerns are addressed at the platform level, decoupling them from individual microservice development teams and ensuring standardization across the architecture.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
How Do Microservices Communicate?

In Microservices Architecture, microservices communicate with each other through two main methods:

1. Synchronous Communication:
- In synchronous communication, the client service waits for a response within a specified time limit.
- This is typically done using the HTTP protocol via REST API for inter-service communication.
- When one microservice calls another, it waits for a response before proceeding further.

2. Asynchronous Communication:
- In asynchronous communication, the client service does not wait for a response from the other service.
- When a microservice calls another, it does not block its thread while waiting for a response.
- Instead, the message producer service generates a message and sends it to a message broker on a defined topic.
- The message producer only waits for acknowledgment from the message broker to confirm that the message has been received.
- The consuming service subscribes to the topic in the messaging queue, receiving messages related to that topic.
- The message producer and consuming services are unaware of each other, communicating only through the message broker.
- Responses follow the same process, with the message broker delivering them via defined message topics.

Examples of messaging tools based on the Advanced Message Queuing Protocol (AMQP) include:

- Apache Kafka
- RabbitMQ
- Apache ActiveMQ
- Amazon Kinesis

These tools facilitate asynchronous communication between microservices, enabling efficient and scalable interactions within a microservices architecture.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Differences between Monolithic, Service-Oriented Architecture (SOA), and Microservices Architecture

Monolithic Architecture:
- In Monolithic Architecture, the entire application is built as a single unit.
- All functionalities of the application, including user interface, business logic, and data access, are tightly integrated into a single codebase.
- Scaling and deploying monolithic applications can be challenging, as any change to one part of the application may require redeploying the entire application.
- Example: A traditional e-commerce website where all features like product catalog, checkout, and user management are part of a single application.

Service-Oriented Architecture (SOA):
- SOA breaks down an application into smaller, loosely-coupled services that communicate with each other through standardized protocols like SOAP or REST.
- Each service represents a specific business functionality and can be developed, deployed, and scaled independently.
- SOA promotes re-usability, as services can be shared across multiple applications.
- Example: An online banking system where separate services handle user authentication, account management, and transaction processing, communicating with each other through APIs.

Microservices Architecture:
- Microservices Architecture is an evolution of SOA, where applications are composed of small, autonomous services that are independently deployable and scalable.
- Each microservice focuses on a single business capability and communicates with other services through lightweight protocols like HTTP or messaging queues.
- Microservices allow for rapid development, deployment, and scaling of individual services, enabling agility and flexibility.
- Example: A video streaming platform like Netflix, where separate microservices handle user authentication, video catalog, recommendation engine, billing, and streaming,
 each independently deployable and scalable.

In summary, while Monolithic Architecture consolidates all functionalities into a single application, SOA decomposes applications into reusable services, and Microservices
Architecture further refines this approach by breaking down services into smaller, independent components for improved agility and scalability.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
How to design microservices?

1. Separate Data Storage: Each microservice should have its own place to store data. This keeps data separate and helps avoid problems when one service needs to change its data.

2. Independent Microservices: Break down the application into small, independent pieces, each doing its own job. This makes it easier to work on and change parts of the
 application without affecting the whole thing.

3. Decentralized Setup: In microservices, each service handles its own work without relying too much on others. This prevents one problem from affecting the entire system.
s
4. Using Different Technologies: It's okay for different microservices to use different programming languages or tools. This lets each service use the best tools for its job.

5. Separate Everything: Each microservice should be developed, deployed, and managed on its own. This makes it easier to work on and change parts of the application without
affecting the whole thing.

6. Design Based on Business Needs: Make sure the software matches the needs of the business it serves. This helps keep the code understandable and easy to maintain.

7. Real-Time Monitoring: Keep an eye on the application as it runs, so you can quickly spot and fix any problems. This keeps the application running smoothly and reliably.

8. Using Containers: Microservices can be deployed in containers like Docker. This keeps everything consistent and makes it easier to manage and grow the application.

By following these guidelines, you can create a strong, flexible, and easy-to-manage microservices architecture.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Communication Methods Between Microservices:

1. Synchronous Communication:
   - This involves direct communication where one service waits for a response after sending a request.
   - Examples: Rest APIs, GraphQL, Feign using Eureka discoveries, and GRPC (a faster alternative developed by Google).
   - Real-world Example: A travel booking system where the flight service communicates with the payment service synchronously to confirm ticket purchases.

2. Asynchronous Communication:
   - In asynchronous communication, services exchange messages through a mediator called a message broker.
   - Common Messaging Systems: ActiveMQ, RabbitMQ, Kafka, and SQS.
   - Real-world Example: An e-commerce platform where order processing services publish order notifications to a message broker, which then notifies inventory
                         management services to update stock levels.

Understanding Asynchronous Communication:

- How It Works:
   - A microservice that wants to share data with another service publishes a message to a message broker.
   - The broker ensures message delivery to the intended recipient, even if the recipient is temporarily unavailable.
   - Messages can be stored temporarily or persistently, depending on configuration.
   - Real-world Example: A banking system where a transaction service sends transaction updates to a message broker, ensuring accurate balance updates across accounts.

- Handling Broker Failure:
   - Message brokers must be fault-tolerant to ensure uninterrupted communication.
   - Backup replicas and retry mechanisms help maintain message delivery during broker failures.
   - Real-world Example: A stock trading platform where a backup message broker ensures trade notifications are delivered, even if the primary broker experiences downtime.

Types of Asynchronous Communication:

1. Point-to-Point (PTP) Communication:
   - Uses queues for one-to-one messaging between sender and receiver services.
   - Messages are consumed by one receiver and deleted after consumption.
   - Example: A notification service sending alerts to a single subscriber.

2. Publisher-Subscriber Communication:
   - Utilizes topics where multiple subscribers can consume messages published by one or more publishers.
   - Messages remain available for consumption until explicitly deleted.
   - Example: A news website publishing articles to a topic, allowing multiple subscribers (users) to receive updates.

Event-Based Asynchronous Communication:

- How It Works:
   - In an event-driven pattern, services push events to a topic in the message broker.
   - Subscribing services react to specific events without needing detailed message structure knowledge.
   - Example: A sensor network pushing temperature readings to a topic, triggering actions like HVAC adjustments based on predefined thresholds.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
When to use which communication method?

- Starting from Scratch:
  - Initially, when building the application from the ground up, opt for a synchronous communication system to prioritize speed of development.
  - As the application evolves, evaluate its growing complexity and multi-functionality.

- Transitioning to Asynchronous Communication:
  - When the microservices architecture becomes more intricate, consider transitioning to asynchronous communications.
  - Identify all communication instances between your microservices, especially interactions with order microservices.
  - Determine if synchronous communication is strictly necessary for each interaction. If not, consider converting those channels to asynchronous communication.
  - Examples of asynchronous communication channels include ActiveMQ, RabbitMQ, Kafka, etc.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Saga design pattern in the context of transitioning from monolithic to microservices architecture, particularly in scenarios like online food delivery platforms such as Swiggy or Zomato.

Why Use the Saga Design Pattern? (Note Only Applicable for Async communication for Sync 2pc and 3pc)

- In monolithic applications, handling transactions is straightforward due to a single database. However, with microservices, where components like order, payment, and
  delivery are separate, managing distributed transactions becomes complex.
- For instance, consider a scenario where an order is placed, payment is made, but delivery fails. In such cases, traditional transaction rollbacks may not suffice,
  resulting in inconsistent states across services.
- The Saga design pattern addresses this by providing a structured approach to manage distributed transactions, ensuring consistency across microservices even in failure scenarios.

How Does the Saga Design Pattern Work?

- The Saga pattern orchestrates a sequence of local transactions within microservices, each having its own database.
- It follows a sequence of steps where each microservice performs its local transaction and triggers the next step by publishing an event.
- In case of failure at any step, the Saga pattern triggers compensating transactions to rollback changes made by previous steps, maintaining data consistency.

Implementing the Saga Pattern:

- There are two main approaches: choreography and orchestration.
- Choreography: Microservices exchange events without centralized control, with each service independently executing its local transactions and triggering events for others.
- Orchestration: A centralized orchestrator coordinates the saga, directing participants on which operations to perform based on events. It handles saga requests,
  interprets task states, and manages failure recovery.

Advantages and Disadvantages of Each Approach:

- Choreography:
  - Advantages: Simple workflows, no single point of failure, easy maintenance.
  - Disadvantages: Complexity in tracking workflows, risk of cyclic dependencies, challenging integration testing.

- Orchestration:
  - Advantages: Suitable for complex workflows, clear control over participants, separation of concerns.
  - Disadvantages: Increased design complexity, single point of failure with orchestrator.

Real-Life Examples:

- In the case of an online food delivery platform, choreography might involve each service (order, payment, delivery) independently handling its tasks and communicating
  events through a message broker.
- On the other hand, orchestration could feature a centralized controller directing the order, payment, and delivery services on the sequence of operations to execute.

Overall, the Saga design pattern ensures transactional integrity and consistency in distributed microservices architectures, offering flexibility in handling complex workflows
while addressing potential failure scenarios.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Can you please provide examples of situations where using microservices over monolithic systems and vice versa is a better choice?

Microservices:

- Scalability Requirements:
  - Example: An e-commerce platform like Amazon scales its checkout service independently during peak shopping seasons to handle increased traffic.

- Technology Diversity:
  - Example: Netflix leverages microservices to use different technologies for its recommendation engine, user authentication, and video streaming services.

- Continuous Deployment:
  - Example: Twitter utilizes microservices to deploy updates to specific features like the timeline or direct messaging without disrupting the entire platform.

Monolithic Systems:

- Simple Applications:
  - Example: A personal blog website uses a monolithic architecture as it only requires basic functionalities like displaying articles and managing user comments.

- Tight Integration:
  - Example: Enterprise resource planning (ERP) systems integrate various modules (e.g., finance, HR, inventory) tightly within a monolith to ensure seamless data flow and consistency.

- Development Simplicity:
  - Example: A small business launches a brochure website with a monolithic architecture to quickly establish an online presence without the complexity of managing multiple services.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Scaling Microservices-based Applications: How do you make sure a Microservices-based application can handle more users as it becomes more popular?

1. Load Balancing:
   - Distributing incoming requests across multiple instances of a service to ensure optimal performance and availability.
   - Example: Amazon's website uses load balancing to evenly distribute user traffic among its various microservices handling different functionalities like search,
     recommendations, and checkout.

2. Horizontal Scaling:
   - Adding more instances of a service to handle increased load by adding more servers or containers.
   - Example: Netflix horizontally scales its video streaming service during peak hours to accommodate a surge in viewership without affecting user experience.

3. Auto Scaling:
   - Automatically adjusting the number of service instances based on real-time traffic patterns to maintain performance and minimize costs.
   - Example: AWS Auto Scaling automatically adds or removes EC2 instances based on predefined metrics like CPU utilization or network traffic.

4. Caching:
   - Storing frequently accessed data in a cache to reduce the load on backend services and improve response times.
   - Example: Facebook caches user profiles and news feed data to serve requests faster, reducing the load on its backend services.

5. Database Scaling:
   - Scaling databases horizontally or vertically to handle increased data volume and access requests.
   - Example: Instagram vertically scales its database infrastructure to accommodate the growing number of users and photos uploaded daily.

6. Asynchronous Processing:
   - Performing tasks asynchronously to decouple services and improve overall system responsiveness.
   - Example: Twitter processes user uploads asynchronously, allowing users to continue using the platform while images and videos are being uploaded in the background.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ensuring Data Consistency in Microservices:

1. Synchronous Communication:
   - Direct request-response communication between services to ensure immediate consistency.

2. Asynchronous Communication:
   - Indirect communication via message queues or event streams, allowing services to process data at their own pace.

3. CQRS (Command Query Responsibility Segregation):
   - Separating read and write operations to different data stores to optimize performance and scalability.

4. Event Sourcing:
   - Storing changes to application state as a sequence of events to enable auditing, replayability, and eventual consistency.

5. Distributed Transactions:
   - Coordinating transactions across multiple microservices to ensure atomicity and consistency.

6. Saga Pattern:
   - Managing long-lived transactions across multiple services by coordinating a series of local transactions with compensating actions.

7. Monitoring and Logging:
   - Implementing robust monitoring and logging solutions to track data changes, identify inconsistencies, and troubleshoot issues.

8. Conflict Resolution:
   - Implementing conflict resolution strategies to handle data conflicts that may arise due to concurrent updates in distributed systems.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2PC and 3PC microservices

Certainly! Let's delve into both the 2-phase commit (2PC) and 3-phase commit (3PC) protocols, along with real-world scenarios to better understand them.

 2-Phase Commit (2PC):

Overview:
In the 2-phase commit protocol, there are two main phases: the prepare phase and the commit phase. It's used in distributed systems to ensure atomicity of transactions across multiple nodes or databases.

Steps:
1. Prepare Phase:
   - The coordinator node sends a prepare request to all participant nodes, asking if they are ready to commit the transaction.
   - Each participant responds with either "Yes, I'm ready (vote to commit)" or "No, I'm not ready (vote to abort)".

2. Commit Phase:
   - If all participants vote to commit, the coordinator sends a commit message to all participants.
   - If any participant votes to abort, the coordinator sends an abort message to all participants, and the transaction is rolled back.

Real-world Example:
Imagine an online shopping scenario where a customer places an order, and the system needs to update inventory and process payment across multiple servers.

- Prepare Phase:
   - The order service communicates with the inventory service and payment service, asking if they are ready to commit the order.
   - Each service responds with their readiness status.

- Commit Phase:
   - If all services are ready, the order service sends a commit message to update inventory and process payment.
   - If any service reports an issue (e.g., insufficient stock), the order is aborted, and the customer is notified.

 3-Phase Commit (3PC):

Overview:
The 3-phase commit protocol extends the 2PC with an additional phase, the "can commit" phase, to enhance fault tolerance and reduce blocking.

Steps:
1. Can Commit Phase:
   - Similar to the prepare phase in 2PC, the coordinator sends a "can commit" message to all participants.
   - Participants respond with either "Yes, I can commit" or "No, I cannot commit".

2. Prepare Phase:
   - If all participants can commit, the coordinator sends a prepare request to all participants.
   - Participants acknowledge their preparedness.

3. Commit Phase:
   - If all participants are prepared, the coordinator sends a commit message to all participants.
   - If any participant fails to respond or indicates that it cannot commit, the coordinator sends an abort message.

Real-world Example:
Consider a distributed banking system where a customer transfers funds from one account to another, involving multiple servers for validation, debiting, and crediting.

- Can Commit Phase:
   - The coordinator checks with each server if they can proceed with the transaction.
   - Servers respond with their ability to commit.

- Prepare Phase:
   - If all servers can commit, the coordinator proceeds to prepare the transaction.
   - Servers prepare for the transaction and acknowledge readiness.

- Commit Phase:
   - If all servers are prepared, the coordinator commits the transaction, transferring funds.
   - If any server experiences an issue, the coordinator aborts the transaction to maintain consistency.

 Summary:
- 2PC ensures atomicity but can block due to its blocking nature.
- 3PC reduces the likelihood of blocking but may still have issues like uncertainty and increased complexity.

These protocols offer ways to manage distributed transactions effectively, each with its trade-offs in terms of complexity, blocking behavior, and fault tolerance.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What is difference between SAGA and 2 Phase Commit? Which one will you prefer and why?

2 Phase Commit:
- Strong Consistency: Ensures that all transactions either succeed or fail together, keeping the data consistent.
- Synchronous: The process waits for each step to complete before moving to the next, which can slow down operations.
- Blocking: It stops everything until a decision is made, which might lead to delays.
- Complexity: Involves intricate mechanisms to coordinate transactions across multiple services.
- Performance Overhead: The process of coordination and waiting can slow down the system.
- Strong Data Consistency: Guarantees that the data is always in a valid state but can lead to delays.

Saga Pattern:
- Eventual Consistency: Allows for temporary inconsistencies, which are resolved over time, ensuring that the system eventually reaches a consistent state.
- Asynchronous: Operates independently, not waiting for each step to complete before moving forward, which speeds up operations.
- Non-Blocking: Doesn't halt the entire process, enabling other tasks to continue while one is in progress.
- Simplicity: Offers a simpler approach to handling distributed transactions across multiple services.
- Better Performance: The asynchronous and non-blocking nature leads to faster operations and improved system responsiveness.
- Temporarily Inconsistency: Accepts temporary inconsistencies but ensures that the system converges to a consistent state over time.

Preference:
- Preference depends on the scenario:
  - For scenarios requiring strong consistency and where delays are acceptable, 2 Phase Commit might be preferred.
  - For scenarios focusing on performance, scalability, and simplicity, Saga Pattern might be favored.

In Summary:
- 2 Phase Commit ensures strong consistency but comes with complexity and performance overhead.
- Saga Pattern prioritizes performance, simplicity, and eventual consistency, accepting temporary inconsistencies.
- Choice depends on the specific requirements and trade-offs of each approach.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
